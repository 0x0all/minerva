{"name":"Minerva","tagline":"A redesigned Minerva. It provides matrix programming interface, just like MATLAB. Python bindings and C++ bindings are both available. The resulting code can be run on CPU or GPU. Multi-GPU support is very easy. Please refer to the examples to see how multi-GPU setting is used.","body":"# Minerva: a fast and flexible system for deep learning\r\n\r\n## Goal\r\nMake deep learning a home dish\r\n\r\n## Features\r\nUnder development\r\n\r\n## How to build\r\n1. Put path and configures in \"configure.in\" (please refer to configure.in.example\")\r\n2. \"./configure\"\r\n3. \"cd debug\"(or \"cd release\") and press \"make\"\r\n\r\n## MNIST data\r\n\r\nhttp://pan.baidu.com/s/1ntsQs0x\r\n\r\n## Dependencies\r\n\r\n* [Boost](http://www.boost.org/)\r\n  Compile with libraries including python and thread.\r\n* [Boost.NumPy](https://github.com/ndarray/Boost.NumPy)\r\n* [Google Test](https://code.google.com/p/googletest/)\r\n  Compile to a shared library.\r\n* [gflags](https://code.google.com/p/gflags/)\r\n  Compile to a shared library.\r\n* [glog](https://code.google.com/p/google-glog/)\r\n* NVIDIA cuDNN\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}